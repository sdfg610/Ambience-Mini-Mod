package gsto.ambience_mini.music.loader.syntactic_analysis;

import gsto.ambience_mini.music.loader.abstract_syntax.expr.*;
import gsto.ambience_mini.music.loader.abstract_syntax.conf.*;
import gsto.ambience_mini.music.loader.abstract_syntax.shed.*;
import gsto.ambience_mini.music.loader.abstract_syntax.play.*;
import java.util.ArrayList;

/* The required start of a Coco/R grammar file. "Program" specifies the starting symbol of the grammar. */


import gsto.ambience_mini.AmbienceMini;

public class Parser {
	public static final int _EOF = 0;
	public static final int _IDENT = 1;
	public static final int _INT = 2;
	public static final int _FLOAT = 3;
	public static final int _STRING = 4;
	public static final int maxT = 29;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	public Conf mainNode = null; // This contains the AST generated by calling parser.Parse().

    public boolean hasErrors() {
        return errors.count > 0;
    }

    private static String removeFirstAndLast(String str) {
        return str.substring(1, str.length() - 1);
    }

    private Expr makeEqOp(String op, Expr left, Expr right)
    {
        return switch (op) {
            case "==" ->  new BinaryOp(BinaryOperators.EQ, left, right);
            case "~~" -> new BinaryOp(BinaryOperators.APP_EQ, left, right);
            default -> throw new RuntimeException("Unknown equality operator: " + op);
        };
    }

/*------------------------------------------------------------------------*/
/* The following section contains the token specification of Dims.*/


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void File() {
		mainNode = Conf();
	}

	Conf  Conf() {
		Conf  conf;
		conf = null; 
		if (la.kind == 5) {
			Get();
			Expect(1);
			IdentP ident = new IdentP(t.val); 
			Expect(6);
			PL play = Play();
			Expect(7);
			Conf inner = Conf();
			conf = new Playlist(ident, play, inner); 
		} else if (StartOf(1)) {
			Shed shed = Shed();
			conf = new Schedule(shed); 
		} else SynErr(30);
		return conf;
	}

	PL  Play() {
		PL  play;
		play = PlayTerm();
		while (la.kind == 8) {
			Get();
			PL play2 = PlayTerm();
			play = new Concat(play, play2); 
		}
		return play;
	}

	Shed  Shed() {
		Shed  shed;
		shed = null; 
		if (la.kind == 15) {
			Get();
			PL pl = Play();
			Expect(7);
			shed = new Play(pl); 
		} else if (la.kind == 16) {
			Get();
			ArrayList<Shed> items = new ArrayList<>();  
			while (StartOf(1)) {
				Shed shed2 = Shed();
				items.add(shed2); 
			}
			Expect(17);
			shed = new Block(items); 
		} else if (la.kind == 18) {
			Get();
			Expect(19);
			Expr expr = Expr();
			Expect(20);
			Shed shed2 = Shed();
			shed = new When(expr, shed2); 
		} else if (la.kind == 21) {
			Get();
			Shed shed2 = Shed();
			shed = new When(new BoolV(true), shed2); 
		} else if (la.kind == 22) {
			Get();
			Shed shed2 = Shed();
			shed = new Interrupt(shed2); 
		} else SynErr(31);
		return shed;
	}

	PL  PlayTerm() {
		PL  play;
		play = new Nil(); FloatV gain = null; 
		if (la.kind == 9) {
			Get();
			if (StartOf(2)) {
				PL load = PlayTerm();
				play = load;      
				while (la.kind == 10) {
					Get();
					load = PlayTerm();
					play = new Concat(play, load); 
				}
			}
			Expect(11);
		} else if (la.kind == 1) {
			Get();
			play = new IdentP(t.val); 
		} else if (la.kind == 12) {
			Get();
		} else if (la.kind == 4) {
			Get();
			StringV file = new StringV(removeFirstAndLast(t.val)); 
			if (la.kind == 13) {
				Get();
				if (la.kind == 3) {
					Get();
				} else if (la.kind == 2) {
					Get();
				} else SynErr(32);
				gain = new FloatV(Float.parseFloat(t.val));            
				Expect(14);
			}
			play = new Load(file, gain);                           
		} else SynErr(33);
		return play;
	}

	Expr  Expr() {
		Expr  expr;
		String op = null; 
		expr = ExprTerm();
		while (la.kind == 23 || la.kind == 24) {
			if (la.kind == 23) {
				Get();
				op = "=="; 
			} else {
				Get();
				op = "~~"; 
			}
			Expr expr2 = ExprTerm();
			expr = makeEqOp(op, expr, expr2); 
		}
		return expr;
	}

	Expr  ExprTerm() {
		Expr  expr;
		expr = null;                                   
		switch (la.kind) {
		case 1: {
			Get();
			expr = new IdentE(t.val);                      
			break;
		}
		case 2: {
			Get();
			expr = new IntV(Integer.parseInt(t.val));      
			break;
		}
		case 3: {
			Get();
			expr = new FloatV(Float.parseFloat(t.val));    
			break;
		}
		case 4: {
			Get();
			expr = new StringV(removeFirstAndLast(t.val)); 
			break;
		}
		case 25: {
			Get();
			expr = new BoolV(true);                        
			break;
		}
		case 26: {
			Get();
			expr = new BoolV(false);                       
			break;
		}
		case 27: {
			Get();
			Expect(1);
			expr = new Event(new IdentE(t.val));           
			break;
		}
		case 28: {
			Get();
			Expect(1);
			expr = new Get(new IdentE(t.val));             
			break;
		}
		default: SynErr(34); break;
		}
		return expr;
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		File();
		Expect(0);

		scanner.buffer.Close();
	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_T,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x},
		{_x,_T,_x,_x, _T,_x,_x,_x, _x,_T,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x}

	};
} // end Parser


class Errors {
	public int count = 0;                                     // number of errors detected
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		AmbienceMini.LOGGER.error(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "IDENT expected"; break;
			case 2: s = "INT expected"; break;
			case 3: s = "FLOAT expected"; break;
			case 4: s = "STRING expected"; break;
			case 5: s = "\"playlist\" expected"; break;
			case 6: s = "\"=\" expected"; break;
			case 7: s = "\";\" expected"; break;
			case 8: s = "\"++\" expected"; break;
			case 9: s = "\"[\" expected"; break;
			case 10: s = "\",\" expected"; break;
			case 11: s = "\"]\" expected"; break;
			case 12: s = "\"NIL\" expected"; break;
			case 13: s = "\"<\" expected"; break;
			case 14: s = "\">\" expected"; break;
			case 15: s = "\"play\" expected"; break;
			case 16: s = "\"begin\" expected"; break;
			case 17: s = "\"end\" expected"; break;
			case 18: s = "\"when\" expected"; break;
			case 19: s = "\"(\" expected"; break;
			case 20: s = "\")\" expected"; break;
			case 21: s = "\"default\" expected"; break;
			case 22: s = "\"interrupt\" expected"; break;
			case 23: s = "\"==\" expected"; break;
			case 24: s = "\"~~\" expected"; break;
			case 25: s = "\"true\" expected"; break;
			case 26: s = "\"false\" expected"; break;
			case 27: s = "\"@\" expected"; break;
			case 28: s = "\":\" expected"; break;
			case 29: s = "??? expected"; break;
			case 30: s = "invalid Conf"; break;
			case 31: s = "invalid Shed"; break;
			case 32: s = "invalid PlayTerm"; break;
			case 33: s = "invalid PlayTerm"; break;
			case 34: s = "invalid ExprTerm"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		AmbienceMini.LOGGER.error(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		AmbienceMini.LOGGER.error(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}
